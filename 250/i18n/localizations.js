/*
	Localization strings file. To translate, copy the entire "en-US" branch, paste in as new member of the object,
	set its name to be the two-letter language code, and translate each string.
	As shown, strings can include simple HTML.
*/
String.toLocaleString({
	"en-US": {
		"%l_filetitle": "Working With Local Data",
		"%l_lessontitle": "Working With Local Data",
		"%l_subtitle": "Building Native Mobile Apps With Appcelerator Titanium",
		"%l_slidenote_titleslide": "<b>Module time: 60 mins</b>(30 teaching, 30 lab)",
		"%l_agenda1": "Understand the different mechanisms for persistence in Titanium Mobile",
		"%l_agenda2": "Learn the basics of the SQLite database engine",
		"%l_agenda3": "Learn how to use the Properties API to store configuration and JavaScript objects",
		"%l_agenda4": "Use persistent data to back user interface elements",
		"%l_slidenote_agenda": "We'll cover the differences between mechanisms and when you'd each",
		"%l_local_data": "Local Data Persistence methods",
		"%l_sql": "SQLite Database",
		"%l_properties": "Properties API",
		"%l_lots": "Lots of structured data === Database",
		"%l_configuration": "Configuration or less than 20 objects === Properties",
		"%l_images": "Images, binary data - don't use blobs if you can avoid it",
		"%l_slidenote_local_data": "",
		"%l_properties_api": "Properties API",
		"%l_lightweight": "Lightweight Key/Value Store",
		"%l_best_suited": "Best suited for light persistence needs (configuration options, saved application state)",
		"%l_coupled": "Coupled with JSON, can be used to store complex JavaScript objects",
		"%l_slidenote_properties_api": "Properties plus JSON is live-coded in the persistence app, with you writing out a JavaScript object to a string property and then reading it back in.",
		"%l_json": "JSON = JavaScript Object Notation",
		"%l_language": "Language-independent text-based means to represent arrays and objects (without methods)",
		"%l_compact": "Compact data format, efficient over slow networks",
		"%l_standardized": "Standardized and widely supported, see json.org",
		"%l_slidenote_json": "Quick intro to JSON<br>Skip if students are familiar with topic",
		"%l_demo_string_props": "Demo: String Properties",
		"%l_slidenote_demo_string_props": "Demo for plain old properties uses the 'Persistence' demo app<br><ol><li>Launch in Developer and demo app</li><li>Enter data and quit</li><li>Fully quit app</li><li>Re-open to demonstrate persistence</li></ul><br>Code review:<ul><li>Open Resources/properties.js</li><li>Ti.App.Properties.getString() and mention data types</li><li>createTextField()</li><li>Change event listener, setString()</li></ul>",
		"%l_simple_obj": "Simple Object Storage",
		"%l_slidenote_simple_obj": "Ti Properties can be used to store simple objects<br>Example user object<br>Save to userData property via JSON.stringify()<br>Reconstitute using JSON.parse()",
		"%l_database_api": "Database API",
		"%l_each_platform": "Each platform features and embedded SQLite database",
		"%l_best_used": "Best used for large amounts of structured data",
		"%l_you_can": "You can use a pre-populated SQLite database file using Ti.Database.install",
		"%l_interact": "Interact with the DB using standard SQL statements",
		"%l_demo_persistence": "Demo: Persistence app",
		"%l_slidenote_database_api": "<b>NOTE:</b> When shipping a pre-populated database, this will NOT use the SD card on Android and will increase the size of the installable binary.  This can be an issue on older Android devices.  Also, any time the binary size gets bigger, you should look at alternatives, like downloading your database from the web <b>Demo --  Persistence app</b><ol><li>Open app, switch to Database tab</li><li>Add an entry</li><li>Click row, alert shows row index</li><li>Click Edit, click delete button, click Delete</li></ol><br><b>Don't do the code review here, next slides</b>",
		"%l_persistence_demo": "Persistence - Database demo",
		"%l_slidenote_persistence_demo": "Code walkthrough:<br><ol><li>Open Resources/app.js and explain basic app structure</li><li>Open database.js</li><ol><li>Grab reference to database with open()</li><li>Create table if it doesn't exist</li><li>Very brief on views/buttons for entry</li><li>Retrieving data from DB and building the table row data</li><li>rows.next() critical, moves cursor to next record</li><li>rows.close() important for memory optimization<br>better to open and close than to leave open</li><li>Creating table, point out editable: true</li><li>Event handler on table for alert()</li><li>Event handler for delete</li><li>Event for adding new row to table<br>should use db.lastInsertRowID property instead</li></ol></ol>",
		"%l_slidenote_persistence_demo_2": "<b>iOS only is the table editing and delete event listener</b><br>Code walkthrough:<br><ol><li>Open Resources/app.js and explain basic app structure</li><li>Open database.js</li><ol><li>Grab reference to database with open()</li><li>Create table if it doesn't exist</li><li>Very brief on views/buttons for entry</li><li>Retrieving data from DB and building the table row data</li><li>rows.next() critical, moves cursor to next record</li><li>rows.close() important for memory optimization<br>better to open and close than to leave open</li><li>Creating table, point out editable: true</li><li>Event handler on table for alert()</li><li>Event handler for delete</li><li>Event for adding new row to table<br>should use db.lastInsertRowID property instead</li></ol></ol>",
		"%l_sqllite_data_types": "SQLite Data Types",
		"%l_small_number": "Small number of built-in data types",
		"%l_text": "Text, Integer, Real, Blob",
		"%l_need_to": "Need to represent other data types within these primitives",
		"%l_boolean": "Integer 0 or 1",
		"%l_date": "Timestamp as text",
		"%l_sqllite_data_type": "SQLite supports more keywords when creating fields, such as VARCHAR<br>But 'under the hood' the various field types are mapped to the four shown here",
		"%l_qa": "Q&A",
		"%l_slidenote_qa": "",
		"%l_lab_goals": "Lab Goals",
		"%l_back_our": "Back our TiBountyHunter application with live data from a SQL database",
		"%l_requirements": "Requirements:",
		"%l_crud": "CRUD operations on our fugitive database",
		"%l_adding": "Adding behavior to our detail and add windows",
		"%l_provide_window": "Update the fugitive lists on create, update or delete",
		"%l_labURL": "<a href='https://wiki.appcelerator.org/display/td/250+Working+With+Local+Data'>wiki.appcelerator.org/display/td/250+Working+With+Local+Data</a>",

		"%l_slidenote_lab_goals": "Sticking with our recommendation for self-contained UI components, you'll want your tableviews to be able to update themselves when fugitives are added, deleted, or updated. You'll want to use events to notify elements of changes and add methods to your components to update themselves with the new data.<br>Demo app<br><ol><li>Add a fugitive or two</li><li>Click to show details, capture (boolean switch)</li><li>Switch to Captured tab and there's the fugitive</li><li>Delete the scoundrel and he's gone from the table</li></ol>",
		"%l_lab": "Lab Exercise",
		"%l_slidenote_lab": "",
		"%l_solution": "Solution Walkthrough",
		"%l_slidenote_solution": "Walk through &mdash; TiBH250<br><ul><li><strong>lib/db.js</strong> &mdash; walk through all the functions</li><li><strong>ui/common/BountyTable.js</strong> &mdash; populate() function and event listener</li><li><strong>ui/common/DetailWindow.js</strong> &mdash; Capture and Delete event listeners</li><li><strong>ui/common/AddWindow.js</strong> &mdash; text field and button, event listener</li></ul>"
	},
	"ja": {
		"%l_filetitle": "ローカルデータの使い方",
		"%l_lessontitle": "ローカルデータの使い方",
		"%l_subtitle": "Appcelerator Titaniumによるネイティブアプリ開発",
		"%l_slidenote_titleslide": "<b>所要時間: 60分</b>(解説 30分、実習 30分)",
	        "%l_agenda_title": "アジェンダ",
		"%l_agenda1": "Titaniumモバイルで幾つかの状態保持のメカニズムを理解する",
		"%l_agenda2": "SQLiteデータベースエンジンの基礎を学ぶ",
		"%l_agenda3": "設定やJavaScriptオブジェクトを保存する為にProperties APIの<br>使い方を学ぶ",
		"%l_agenda4": "ユーザインターフェースの状態を復元する為に保持したデータを使う",
		"%l_slidenote_agenda": "我々はメカニズムとそれぞれをあなたがいつ用いるのかの違いをカバーします",
		"%l_local_data": "Local Data Persistenceメソッド",
		"%l_sql": "SQLite データベース",
		"%l_properties": "Properties API",
		"%l_lots": "大量の構造かされたデータ === データベース",
		"%l_configuration": "設定や20個以下のオブジェクト === Properties",
		"%l_images": "イメージやバイナリーデータ - なるべくblob形式を使わない",
		"%l_slidenote_local_data": "",
		"%l_properties_api": "Properties API",
		"%l_lightweight": "軽量キーバリューストア",
		"%l_best_suited": "少量のデータ保持に最適 (設定情報、アプリの状態保存)",
		"%l_coupled": "JSONに変換することで複雑なJavaScriptオブジェクトの保存にも<br>使うことが可能",
		"%l_slidenote_properties_api": "persistenceアプリを用いてPropertiesとJSONのライブコーディングを行います。JavaScriptのオブジェクトを文字列のプロパティに書きだして、それを読み込みJavaScriptのオブジェクトに戻します",
		"%l_json": "JSON = JavaScript Object Notation",
		"%l_language": "オブジェクトや配列を言語に依存しないで、テキストベースで表現する形式(メソッドを用いずに)",
		"%l_compact": "遅いネットワーク上でも効率的な、コンパクトなデータフォーマット",
		"%l_standardized": "標準化され、広範な環境でサポート - json.orgをご参照",
		"%l_slidenote_json": "JSONの簡単な紹介<br>もし生徒がJSONに精通していたら飛ばす",
		"%l_demo_string_props": "デモ: String Properties",
		"%l_slidenote_demo_string_props": "'Persistence'デモアプリを用いて簡単なプロパティを保存するデモ<br><ol><li>アプリを起動してデモを行なう</li><li>データを入力して終了する</li><li>アプリを完全に終了する</li><li>データを保持していることを見せるためにアプリ再起動する</li></ul><br>コードレビュー:<ul><li>Resources/properties.jsを開く</li><li>Ti.App.Properties.getString()を参照してデータ型を述べる</li><li>createTextField()</li><li>setString()イベントリスナーを編集</li></ul>",
		"%l_simple_obj": "シンプルなオブジェクトの保存",
		"%l_slidenote_simple_obj": "Ti Propertiesは簡単なオブジェクトを保存することに使用できます<br>例えば、ユーザーオブジェクト<br>JSON.stringify()を介してuserDataプロパティーに保存します<br>JSON.parse()を用いて復帰します",
		"%l_database_api": "データベースAPI",
		"%l_each_platform": "各プラットフォームの機能と内蔵されたSQLiteデータベース",
		"%l_best_used": "大量の構造化されたデータの保持に最適",
		"%l_you_can": "Ti.Database.installを用いることで、事前に設定されたSQLiteの<br>データベースファイルを使用可能",
		"%l_interact": "標準的なSQL文でデータベースとやり取り",
		"%l_demo_persistence": "Demo: Persistenceアプリ",
		"%l_slidenote_database_api": "<b>注:</b> 事前にデータ登録されたデータベースで提供する場合、AndroidでSDカードを使いませんので、インストールするバイナリーのサイズが大きくなってしまいます。これは古いAndroidの端末では問題になることがあるでしょう。もちろん、バイナリーサイズが大きくなる場合にはいつでも代替えの手段を検討すべきです。例えば、Webからデータベースをダウンロードするなど。<b>デモ --  Persistenceアプリ</b><ol><li>アプリを起動して、Databaseタブを選択</li><li>エントリーを追加</li><li>行をクリックすると、行のインデックスをアラートが表示</li><li>Editをクリックして、削除バタンをクリック、Deleteをクリック</li></ol><br><b>ここでコードレビューはしないでください。次のスライドで行います</b>",
		"%l_persistence_demo": "Persistence - データベースのデモ",
		"%l_slidenote_persistence_demo": "コードのウォークスルー:<br><ol><li>Resources/app.jsを開いて、基本的なアプリの構造を解説</li><li>database.jsを開く</li><ol><li>リファレンスでデータベースのopen()の項を紹介する</li><li>テーブルが存在しなければ作成する</li><li>エントリーを入力する為のviews/buttonsを解説</li><li>DBからデータを検索してテーブルの行データを構成する</li><li>rows.next() 次のレコードにカーソルを移動する、重要</li><li>rows.close() メモリーを節約する為には重要です<br>openしっ放しにするよりも、openしたらcloseする方が良い</li><li>テーブルを作成。editableをtrueにすることを指摘しておく</li><li>警告の為のテーブルイベントハンドラー</li><li>削除のイベントハンドラー</li><li>テーブルに新しい行を追加する為のイベント<br>代わりにdb.lastInsertRowIDプロパティを用いるべき</li></ol></ol>",
	        "%l_slidenote_persistence_demo_2": "<b>テーブルの編集と削除のイベントリスナーはiOSのみです</b><br>コードのウォークスルー:<br><ol><li>Resources/app.jsを開き、基本的なアプリの構造を解説</li><li>database.jsを開く</li><ol><li>リファレンスでデータベースのopen()の項を紹介する</li><li>テーブルが存在しなければ作成する</li><li>エントリーを入力する為のviews/buttonsを解説</li><li>DBからデータを検索してテーブルの行データを構成する</li><li>rows.next() 次のレコードにカーソルを移動する、重要</li><li>rows.close() メモリーを節約する為には重要です<br>openしっ放しにするよりも、openしたらcloseする方が良い</li><li>テーブルを作成。editableをtrueにすることを指摘しておく</li><li>警告の為のテーブルイベントハンドラー</li><li>削除のイベントハンドラー</li><li>テーブルに新しい行を追加する為のイベント<br>代わりにdb.lastInsertRowIDプロパティを用いるべき</li></ol></ol>",
		"%l_sqllite_data_types": "SQLiteのデータ型",
		"%l_small_number": "組み込まれているデータ型は少ない",
		"%l_text": "文字列、整数、実数、Blob",
		"%l_need_to": "その他のデータ型は上記のデータ型を利用して表現する必要がある",
		"%l_boolean": "真偽値 - 整数の0か1",
		"%l_date": "日付 - タイムスタンプを文字列で表現",
		"%l_slidenote_sqllite_data_type": "SQLiteはフィールド作成時にはVARCHARのようなよりたくさんのキーワードをサポートする<br>しかし '中身' としては、これらの様々なフィールドタイプはここに示した４つのデータ型にマッピングされる",
		"%l_qa": "Q&A",
		"%l_slidenote_qa": "",
		"%l_lab_goals": "実習目標",
		"%l_back_our": "TiBountyHunterアプリケ−ションをSQLデータベース内の<br>生のデータを用いて復元する",
		"%l_requirements": "課題:",
		"%l_crud": "逃亡者データベースに対してCRUD処理を行なう",
		"%l_adding": "詳細と追加ウィンドウに属性を追加する",
		"%l_provide_window": "create、updateあるいはdeleteで、逃亡者のリストを更新",
		"%l_labURL": "<a href='https://wiki.appcelerator.org/display/td/250+Working+With+Local+Data'>wiki.appcelerator.org/display/td/250+Working+With+Local+Data</a>",

		"%l_slidenote_lab_goals": "我々が推奨する自己完結するUIコンポーネントにこだわります。あなたは逃亡者が追加、削除あるいは更新された時にtableviewが自身で更新できるようにしたいでしょう。 あなたは新しいデータで自分自身を更新できるようにメソッドを追加したり、変更された要素を知らせる為にイベントを使いたくなるでしょう。<br>デモアプリ<br><ol><li>逃亡者を１名ないし２名追加します</li><li>逮捕(ブール値のスイッチ)の詳細を見るためにクリックします</li><li>逮捕タブに切り替えるとそこに逃亡者がいます</li><li>scoundrelを削除すると彼はテーブルから居なくなります</li></ol>",
		"%l_lab": "実習課題",
		"%l_slidenote_lab": "",
		"%l_solution": "ソリューションウォークスルー",
		"%l_slidenote_solution": "ウォークスルー &mdash; TiBH250<br><ul><li><strong>lib/db.js</strong> &mdash; 全ての関数をウォークスルー</li><li><strong>ui/common/BountyTable.js</strong> &mdash; populate() 関数とイベントリスナー</li><li><strong>ui/common/DetailWindow.js</strong> &mdash; CaptureとDeleteイベントリスナー</li><li><strong>ui/common/AddWindow.js</strong> &mdash; text fieldとbutton、イベントリスナー</li></ul>"
	}
});
