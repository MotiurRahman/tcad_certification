/*
	Localization strings file. To translate, copy the entire "en-US" branch, paste in as new member of the object, 
	set its name to be the two-letter language code, and translate each string.
	As shown, strings can include simple HTML.
*/
String.toLocaleString({
	"en-US": {
		"%l_filetitle": "Working With Local Data",
		"%l_lessontitle": "Working With Local Data",
		"%l_subtitle": "Building Native Mobile Apps With Appcelerator Titanium",
		"%l_slidenote_titleslide": "<b>Module time: 60 mins</b>(30 teaching, 30 lab)",
		"%l_agenda1": "Understand the different mechanisms for persistence in Titanium Mobile",
		"%l_agenda2": "Learn the basics of the SQLite database engine",
		"%l_agenda3": "Learn how to use the Properties API to store configuration and JavaScript objects",
		"%l_agenda4": "Use persistent data to back user interface elements",
		"%l_slidenote_agenda": "We'll cover the differences between mechanisms and when you'd each",
		"%l_local_data": "Local Data Persistence methods",
		"%l_sql": "SQLite Database",
		"%l_properties": "Properties API",
		"%l_lots": "Lots of structured data === Database",
		"%l_configuration": "Configuration or less than 20 objects === Properties",
		"%l_images": "Images, binary data - don't use blobs if you can avoid it",
		"%l_slidenote_local_data": "",
		"%l_properties_api": "Properties API",
		"%l_lightweight": "Lightweight Key/Value Store",
		"%l_best_suited": "Best suited for light persistence needs (configuration options, saved application state)",
		"%l_coupled": "Coupled with JSON, can be used to store complex JavaScript objects",
		"%l_slidenote_properties_api": "Properties plus JSON is live-coded in the persistence app, with you writing out a JavaScript object to a string property and then reading it back in.",
		"%l_json": "JSON = JavaScript Object Notation",
		"%l_language": "Language-independent text-based means to represent arrays and objects (without methods)",
		"%l_compact": "Compact data format, efficient over slow networks",
		"%l_standardized": "Standardized and widely supported, see json.org",
		"%l_slidenote_json": "Quick intro to JSON<br>Skip if students are familiar with topic",
		"%l_demo_string_props": "Demo: String Properties",
		"%l_slidenote_demo_string_props": "Demo for plain old properties uses the 'Persistence' demo app<br><ol><li>Launch in Developer and demo app</li><li>Enter data and quit</li><li>Fully quit app</li><li>Re-open to demonstrate persistence</li></ul><br>Code review:<ul><li>Open Resources/properties.js</li><li>Ti.App.Properties.getString() and mention data types</li><li>createTextField()</li><li>Change event listener, setString()</li></ul>",
		"%l_simple_obj": "Simple Object Storage",
		"%l_slidenote_simple_obj": "Ti Properties can be used to store simple objects<br>Example user object<br>Save to userData property via JSON.stringify()<br>Reconstitute using JSON.parse()",
		"%l_database_api": "Database API",
		"%l_each_platform": "Each platform features and embedded SQLite database",
		"%l_best_used": "Best used for large amounts of structured data",
		"%l_you_can": "You can use a pre-populated SQLite database file using Ti.Database.install",
		"%l_interact": "Interact with the DB using standard SQL statements",
		"%l_demo_persistence": "Demo: Persistence app",
		"%l_slidenote_database_api": "<b>NOTE:</b> When shipping a pre-populated database, this will NOT use the SD card on Android and will increase the size of the installable binary.  This can be an issue on older Android devices.  Also, any time the binary size gets bigger, you should look at alternatives, like downloading your database from the web <b>Demo --  Persistence app</b><ol><li>Open app, switch to Database tab</li><li>Add an entry</li><li>Click row, alert shows row index</li><li>Click Edit, click delete button, click Delete</li></ol><br><b>Don't do the code review here, next slides</b>",
		"%l_persistence_demo": "Persistence - Database demo",
		"%l_slidenote_persistence_demo": "Code walkthrough:<br><ol><li>Open Resources/app.js and explain basic app structure</li><li>Open database.js</li><ol><li>Grab reference to database with open()</li><li>Create table if it doesn't exist</li><li>Very brief on views/buttons for entry</li><li>Retrieving data from DB and building the table row data</li><li>rows.next() critical, moves cursor to next record</li><li>rows.close() important for memory optimization<br>better to open and close than to leave open</li><li>Creating table, point out editable: true</li><li>Event handler on table for alert()</li><li>Event handler for delete</li><li>Event for adding new row to table<br>should use db.lastInsertRowID property instead</li></ol></ol>",
		"%l_slidenote_persistence_demo_2": "<b>iOS only is the table editing and delete event listener</b><br>Code walkthrough:<br><ol><li>Open Resources/app.js and explain basic app structure</li><li>Open database.js</li><ol><li>Grab reference to database with open()</li><li>Create table if it doesn't exist</li><li>Very brief on views/buttons for entry</li><li>Retrieving data from DB and building the table row data</li><li>rows.next() critical, moves cursor to next record</li><li>rows.close() important for memory optimization<br>better to open and close than to leave open</li><li>Creating table, point out editable: true</li><li>Event handler on table for alert()</li><li>Event handler for delete</li><li>Event for adding new row to table<br>should use db.lastInsertRowID property instead</li></ol></ol>",
		"%l_sqllite_data_types": "SQLite Data Types",
		"%l_small_number": "Small number of built-in data types",
		"%l_text": "Text, Integer, Real, Blob",
		"%l_need_to": "Need to represent other data types within these primitives",
		"%l_boolean": "Integer 0 or 1",
		"%l_date": "Timestamp as text",
		"%l_sqllite_data_type": "SQLite supports more keywords when creating fields, such as VARCHAR<br>But 'under the hood' the various field types are mapped to the four shown here",
		"%l_qa": "Q&A",
		"%l_slidenote_qa": "",
		"%l_lab_goals": "Lab Goals",
		"%l_back_our": "Back our TiBountyHunter application with live data from a SQL database",
		"%l_requirements": "Requirements:",
		"%l_crud": "CRUD operations on our fugitive database",
		"%l_adding": "Adding behavior to our detail and add windows",
		"%l_provide_window": "Update the fugitive lists on create, update or delete",
		"%l_labURL": "<a href='https://wiki.appcelerator.org/display/td/250+Working+With+Local+Data'>wiki.appcelerator.org/display/td/250+Working+With+Local+Data</a>",

		"%l_slidenote_lab_goals": "Sticking with our recommendation for self-contained UI components, you'll want your tableviews to be able to update themselves when fugitives are added, deleted, or updated. You'll want to use events to notify elements of changes and add methods to your components to update themselves with the new data.<br>Demo app<br><ol><li>Add a fugitive or two</li><li>Click to show details, capture (boolean switch)</li><li>Switch to Captured tab and there's the fugitive</li><li>Delete the scoundrel and he's gone from the table</li></ol>",
		"%l_lab": "Lab Exercise",
		"%l_slidenote_lab": "",
		"%l_solution": "Solution Walkthrough",
		"%l_slidenote_solution": "Walk through &mdash; TiBH250<br><u>app.js</u><ul><li>new included file</li></ul><u>db.js</u><ul><li>DB open, create table, and close statements</li><li>list()</li><li>ternary operator</li><li>add() - not application level event</li><li>delete()</li><li>bust()</li></ul>"
	}
});
