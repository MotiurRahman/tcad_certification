/*
	Localization strings file. To translate, copy the entire "en-US" branch, paste in as new member of the object, 
	set its name to be the two-letter language code, and translate each string.
	As shown, strings can include simple HTML.
*/
String.toLocaleString({
	"en-US": {
		"%l_filetitle": "UI Fundamentals",
		"%l_lessontitle": "UI Fundamentals",
		"%l_slidenote_titleslide": "<b>Module time: 1 hour, 15 mins</b>(30 mins teaching, 45 mins lab",
		"%l_agenda1": "Basic Titanium user interface structures",
		"%l_agenda2": "The Titanium View Hierarchy",
		"%l_agenda3": "Layouts and positioning",
		"%l_agenda4": "Event Handling",
		"%l_slidenote_agenda": "View hierarchy = relationship components have to each other as you lay them out<br>Event handling on a component and app level",
		"%l_iOS_components": "iOS User Interface Components",
		"%l_slidenote_iOS_components": "Briefly introduce the key iOS user interface components especially for the Android users in the class",
		"%l_android_components": "Android User Interface Components",
		"%l_slidenote_android_components": "Briefly introduce the key Android user interface components especially for the iOS users in the class",
		"%l_basic_app_structure": "Basic Application Structure",
		"%l_slidenote_basic_app_structure": "Brief: there are two basic ways to structure an app<br>Tab group with multiple windows<br>Single window with individual views or stack of sub-windows<br>Key goal is to make our UI elements self-contained and self-updating to abstract the UI from the app’s logic",
		"%l_for_you": "For you web developers ...",
		"%l_window": "A 'window' is analogous to a 'page'",
		"%l_view": "A 'view' is analogous to a 'div'",
		"%l_namespace": "Ti.UI namespace provides many specialized controls (buttons, text field, pickers, scroll views)",
		"%l_ui_objects": "UI objects are composed in JavaScript similarly to DOM fragments",
		"%l_slidenote_for_you": "UI elements composed in constructor style structure, pass parameters and get an object in return",
		"%l_view_hierarchy": "View Hierarchy and Positioning",
		"%l_modeled": "Mobile deployment and distribution features",
		"%l_views": "Views positioned relative to parent",
		"%l_layout": "Layout options:",
		"%l_absolute": "Absolute",
		"%l_vertical": "Vertical",
		"%l_horizontal": "Horizontal",
		"%l_points": "Points or percentage heights/widths",
		"%l_slidenote_view_hierarchy": "Absolute – relative to parent not screen Vertical & horizontal – apply to parent object – we’ll see examples in upcoming slides",
		"%l_absolute_layout": "Absolute Layout",
		"%l_slidenote_absolute_layout": "We have here a window with a couple UI elements<br>The button is positioned 170 points from the parent’s top edge",
		"%l_slidenote_absolute_layout_2": "Absolute, left 30 points from left edge",
		"%l_vertical_layout": "Vertical Layout",
		"%l_slidenote_vertical_layout": "Parent object has the Vertical layout<br>Child object’s positions are then in relation to each other within the parent",
		"%l_event_handling": "Event Handling",
		"%l_similar": "Similar To JavaScript in the browser",
		"%l_can_use": "Can use addEventListener on nearly any JS object",
		"%l_can_prog": "Can programmatically fire events on objects as well",
		"%l_demo": "Demo: A simple event handler in the default project",
		"%l_slidenote_event_handling": "Add event listeners to objects at a component, object or app level<br>Programmatically fire events<br>Demo:<br><ol><li>Test app from prev. module or new default app</li><li>Add event listener to the label on win1, change text of label(Note: “tap” event is the same as “click”)</li><li>Build, click label to see event fired</li></ul>",
		"%l_execution_contexts": "Execution Contexts",
		"%l_app_has": "App has one execution context by default - similar to JS thread in the browser",
		"%l_can_create": "Can create more by:",
		"%l_windows_with": "Windows with URLs",
		"%l_background": "Background Services",
		"%l_each_has": "Each has unique symbol space - variables declared in one context unavailable in another",
		"%l_demo_execution": "Demo: Execution Contexts in the default application",
		"%l_slidenote_execution_contexts": "Execution context is a variable space, processing thread<br>App.js is default context, which you get automatically<br>Can create others, but maybe not desirable<br>Demo:<br><ol><li>In your test app, move win1 code to separate file</li><li>Update app.js to load the windows from those files</li><li>Build – error – can’t find window object</li><li>Fix with Ti.UI.currentWindow, re-build</li></ul>",
		"%l_more_execution_contexts": "More On Execution Contexts",
		"%l_typically": "Typically, we recommend using only a single context",
		"%l_use_multiples": "Use multiples only when 'clean slate' is desired",
		"%l_if_multiples": "If multiple contexts are in use, it is often necessary to share data across them",
		"%l_for_this": "For this, use application-level events",
		"%l_slidenote_more_execution_contexts": "Kitchen Sink specifically uses separate contexts because it needs / wants those clean slates",
		"%l_application_events": "Application-Level Events",
		"%l_useful": "Useful for sending JSON-serializable data across contexts",
		"%l_publishing": "Useful for publishing and subscribing to application events even in a single context",
		"%l_critical": "Critical API in component oriented applications",
		"%l_demo_cross_context": "Demo: Cross-context messages in the default application",
		"%l_slidenote_application_events": "Using App level events, we can de-couple our UI from our logic<br>UI components can listen for events and update themselves<br>Events can just alert or pass JSON serializable data<br>Demo:<ol><li>Move win 2 to win2.js, using Ti.UI.currentWindow</li><li>Label2, subscribe to app:labelclicked event</li><ul><li>receives data in event object</li><li>update label2 text & color</li></ul><li>In win1.js, click event handler fires app:labelclicked</li><ul><li>pass message text as second arg</li</ul><li>Build – doesn’t work – window has to have been opened to receive events</li></ul>",
		"%l_composing": "Composing Your App's UI",
		"%l_50_percent": "50% or more of your job is UI component construction",
		"%l_most_of": "Most of the rest is event handling logic",
		"%l_your_app": "Your app will be more maintainable if you break it down into small components",
		"%l_recommendation": "Recommendation: Use app.js to bootstrap your application and create/show/open one single UI component from your app",
		"%l_slidenote_composing": "Self-contained, self-updating components are easiest to maintain<br>Single context is recommended",
		"%l_iterative": "Iterative UI Programming",
		"%l_ui_prog": "UI programming can boil down to pushing pixels",
		"%l_need_to": "Need to have the fastest possible cycles, but also need to test cross-platform from the get-go!",
		"%l_ios_sim": "iOS Simulator is fast for dev, device cycle is slow",
		"%l_android_emu": "Android Emulator is S-L-O-W - keep it running!",
		"%l_android_dev": "Android devices are faster (better for dev)",
		"%l_slidenote_iterative": "Don’t wait to test cross-platform, Android and iOS can be very different",
		"%l_qa": "Q&A",
		"%l_slidenote_qa": "",
		"%l_lab_goals": "Lab Goals",
		"%l_compose": "Compose a basic two tab application",
		"%l_requirements": "Requirements:",
		"%l_display_list": "Display list of fugitives (dummy data)",
		"%l_drill_down": "Drill down into a detail window","%l_provide_window": "Provide a window to add a fugitive",
		"%l_demo_lab": "Demo and Lab URL",
		"%l_slidenote_lab_goals": "Detail window – buttons don’t do anything, show labels with actual data<br>Add window will be empty at this point<br>Demo finished code: TiBH220<br>Hint: try to re-use as much as possible. So, one function to show detail window that accepts a busted boolean to show the details for the at-large and captured fugitives",
		"%l_lab": "Lab Exercise",
		"%l_slidenote_lab": "",
		"%l_solution": "Solution Walkthrough",
		"%l_slidenote_solution": "TiBH220 – ui.js file<br><ul><li>createAddWindow() function</li><li>createDetailWindow()</li></ul><ul><li>The _bounty param & comment</li><li>ternary operator</li></ul><li>createBountyTableView()</li><ul><li>single function for both tables</li><li>boolean param</li><li>grab handle to tab</li><li>table data construction</li></ul><li>createBountyWindow()</li><ul><li>boolean param</li>Android menu<li>platform switch to set right nav button</li></ul><li>createApplicationTabGroup()</li><ul><li>single function</li><li>call createBountyWindow() twice</li></ul></ul>"
	}
});
