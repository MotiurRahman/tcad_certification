/*
	Localization strings file. To translate, copy the entire "en-US" branch, paste in as new member of the object, 
	set its name to be the two-letter language code, and translate each string.
	As shown, strings can include simple HTML.
*/
String.toLocaleString({
	"en-US": {
		"%l_filetitle": "Deployment & Distribution",
		"%l_lessontitle": "Deployment & Distribution",
		"%l_slidenote_titleslide": "<b>Module time: 60 mins</b>(30 mins teaching, 30 mins for lab)",
		"%l_agenda_title": "Agenda",
		"%l_agenda1": "Deploying to a device for testing",
		"%l_agenda2": "Publishing to the Android Market",
		"%l_agenda3": "Publishing to the AppStore",
		"%l_agenda4": "AdHoc, Enterprise, and private distribution",
		"%l_agenda5": "Lab Exercise",
		"%l_slidenote_agenda": "Present the agenda...",
		"%l_deployment": "Deployment",
		"%l_getting_your": "Getting your app onto a device for testing",
		"%l_locally_connected": "Locally connected devices",
		"%l_remote_devices": "Remote devices",
		"%l_ios_android": "iOS and Android processes very different",
		"%l_slidenote_deployment": "You can deploy over a USB connection<br>There are techniques for deploying to remote devices<br>iOS/Android processes different",
		"%l_android_deployment": "Android Deployment",
		"%l_slidenote_android_deployment": "Let’s talk first about deploying your app for testing on Android devices",
		"%l_android_deployment_testing": "Android deployment for testing",
		"%l_slidenote_android_deployment_testing": "Simple, two-step process for Android",
		"%l_configure_device": "Configure device for testing",
		"%l_slidenote_configure_device": "First, configure device for testing<br>Windows users: need to install drivers specific to your device<br>Linux users: need to create USB config<br>See the wiki",
		"%l_local_android": "Local Android deployment",
		"%l_connect_device": "Connect device to USB port",
		"%l_run_menu": "From Run menu, choose Android Device",
		"%l_slidenote_local_android": "Android deployment for testing is pretty simple<br>Can also manually install the APK via ADB<br>Or by transferring apk to device and opening with a file manager<br>Ti Studio signs APK with a debug compatible certificate. You could go through the signing steps but that’s unnecessary)",
		"%l_remote_android": "Remote Android deployment",
		"%l_get_apk": "Get the APK to the user's device",
		"%l_email": "Email",
		"%l_post": "Post on a web site",
		"%l_distribution": "Distribution framework",
		"%l_slidenote_remote_android": "Just get the APK onto the user’s device<br>Use the apk-debug version to skip code signing steps<br>Email, post on a web site, share through Dropbox<br>Over-the-air system like HockeyKit can automate deployment and updates",
		"%l_ios_deployment": "iOS Deployment",
		"%l_slidenote_ios_deployment": "",
		"%l_ios_deployment_testing": "iOS deployment for testing",
		"%l_slidenote_ios_deployment_testing": "Six step of Apple’s process – don’t go in-depth here",
		"%l_apple_dev": "Apple Developer Program",
		"%l_free_to": "Free to register, download SDK",
		"%l_annual": "Annual fee for iOS Developer program",
		"%l_individual": "Individual, Company, Enterprise, & University programs",
		"%l_slidenote_apple_dev": "You can register for free<br>Need to pay to publish and distribute apps<br>Various levels with varying documentation",
		"%l_ios_dev_certificate": "Developer's certificate",
		"%l_slidenote_ios_dev_certificate": "Certificate identifies you as the developer<br>Create with Keychain Access<br>Upload CSR file to provisioning portal<br>Download and install the resulting certificate into login keychain<br>Also need Apple’s WWDR certificate",
		"%l_register_devices": "Register devices",
		"%l_slidenote_register_devices": "RRegister devices used for testing<br>Need the UDID<br>Get that from Xcode or iTunes<br>Enter at Provisioning Portal",
		"%l_create_appid": "Create an AppID",
		"%l_unique": "Unique identifier for your app",
		"%l_bundle": "Bundle Seed ID - 10 character universally unique",
		"%l_cf": "CF Bundle Identifier - app name or wildcard",
		"%l_bundle_id": "Bundle Identifier must be unique for Push, In-App purchases, Game Center",
		"%l_slidenote_create_appid": "Bundle Seed ID generated by the Provisioning Portal<br>CF Bundle Identifier you specify<br>Could name a specific app<br>Could be asterisk (wildcard)<br>Need specific name, not wildcard for Push Notification, In-App purchases, and Game center",
		"%l_prov_profile": "Provisioning profile",
		"%l_slidenote_prov_profile": "Provisioning profile = collection of your certificate, app ID, and device IDs<br>Install to device to enable testing<br>You’ll create a similar provisioning profile for final distribution",
		"%l_install_prov_profile": "profile",
		"%l_option_1": "Option 1: Drag & Drop to Xcode",
		"%l_slidenote_install_prov_profile": "Ultimately, you need to install to Xcode<br>You can drag & drop<br>or install via Ti Studio (next slide)",
		"%l_install_ti_studio": "Option 2: Install via Titanium Studio",
		"%l_slidenote_install_prov_profile_ti": "If not installed via Xcode, click Upload and Ti Studio will install for you<br>Ti Studio should recognize certificates in your keychain",
		"%l_install_local": "Installing to local test device",
		"%l_connect_usb": "Connect via USB",
		"%l_choose_ios": "Choose iOS Device from Run menu",
		"%l_install_ipa": "Install IPA using Xcode or iTunes sync",
		"%l_slidenote_install_local": "Finally, install to your locally connected device",
		"%l_distr_remote": "Distributing to remote testers",
		"%l_email_prov": "Email mobileprovision file and IPA",
		"%l_ota": "Over-the-air distribution systems:",
		"%l_testflight": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestFlightApp",
		"%l_diawi": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Diawi",
		"%l_appsendr": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppSendr",
		"%l_hockey": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HockeyKit",
		"%l_slidenote_distr_remote": "Distribution systems: basically you upload to a web server<br>Users are notified on their devices to install or upgrade<br>Fee or free services<br>HockeyKit is an open source, DIY system you install on your web server, supports both iOS and Android distribution",
		"%l_android_market": "Android Market",
		"%l_slidenote_android_market": "",
		"%l_qa": "Q&A",
		"%l_slidenote_qa": "",
		"%l_lab_goals": "Lab Goals",
		"%l_requirement": "Requirements:",
		"%l_pull_in": "Pull in an RSS feed and place the results in a TableView",
		"%l_create_an": "Create an 'about' page using local HTML",
		"%l_demo_lab": "Demo and Lab URL",
		"%l_demo_wiki": "Demo and Wiki URL",
		"%l_slidenote_lab_goals": "Demo – Lab285:</b><ol><li>Show scrolling list of news items</li><li>Click one to show web view</li><li>Click About tab to show local HTML data</li></ol><br>Switched RSS feed might have gone stale, use Dev blog instead:<br>http://developer.appcelerator.com/blog/feed",
		"%l_lab_exercise": "Lab Exercise",
		"%l_slidenote_lab_exercise": "<b>Code Walkthrough – Lab285</b><br>app.js<ul><li>show URL at top</li><li>xhr.onload ~line 66</li><ul><li>xml = this.responseXML</li><li>talk through walking the XML DOM</li><li>loop through items array to build table rows</li><li>point out custom <b>row.link</b> property</li><li>tableview event listener</li><li>custom property <b>(win.myurl)</b> on window</li></ul></ul><u>showweb.js</u><ul><li>creating the web view (line 2)</li><li>loads url passed in via custom window property</li></ul>Scroll back to top to point out local HTML<br>Could load from about.html instead"
	}
});
