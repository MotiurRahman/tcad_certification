/*
	Localization strings file. To translate, copy the entire "en-US" branch, paste in as new member of the object, 
	set its name to be the two-letter language code, and translate each string.
	As shown, strings can include simple HTML.
*/
String.toLocaleString({
	"en-US": {
		"%l_filetitle": "Cross-Platform JavaScript Applications",
		"%l_lessontitle": "Building Native Mobile Apps with Titanium",
		"%l_slidenote_titleslide": "<b>Module time: 1:30</b>(60 mins teach, 30 mins lab)<br>This module will cover best practices for creating cross-platform mobile apps",
		"%l_agenda1": "Building JavaScript applications for Titanium",
		"%l_agenda2": "Coping with (and taking advantage of) different platforms",
		"%l_agenda3": "Cross-platform techniques in action",
		"%l_agenda4": "Introducing TiBountyHunter (Lab)",
		"%l_slidenote_agenda": "How to structure JS code in large application<br>Coping with platform differences, but taking advantage of those differences<br>We'll introduce our lab and sample application and lay the foundation for the rest of that app.",
		"%l_large_js_apps": "Large JavaScript Applications",
		"%l_for_many": "For many developers, Titanium Mobile may be their first large JavaScript app",
		"%l_procredural": "Procedural JavaScript (like random Ajax or UI on a web page) won't cut it",
		"%l_need": "Protect the global scope",
		"%l_be_modular": "Be modular (mix of OO and module pattern)",
		"%l_need_to_strive": "Need to strive to keep code DRY",
		"%l_slidenote_large_js_apps": "Ti projects go beyond DOM manipulation on a web page. Need strategies for organizing and writing JS code.<br> You have to write well-formed, strictly syntactically correct code to compile without errors on both platforms. <br>Protecting the global scope means being careful with global variables and scope.<br>Being <i>modular</i> means creating JavaScript business objects when it makes sense (for actual data model objects, for instance), and modules when that makes sense (data or network access)<br>DRY means Don't Repeat Yourself.  Need to reuse code as much as possible for the sake of maintainability",
		"%l_write_rich_js_apps": "Writing Rich Client Applications",
		"%l_similar": "Similar in spirit to single-page web applications",
		"%l_rich_clients": "Rich Clients share characteristics:",
		"%l_sophisticated_ui": "Sophisticated UI controls",
		"%l_client_side": "Client-side data models",
		"%l_local_storage": "Local storage and focused remote data access",
		"%l_component_oriented": "Component Oriented, Event Driven (more later)",
		"%l_slidenote_write_rich_js_apps": "Titanium Mobile applications have a lot in common with rich client browser apps written in Flex or ExtJS<br>Native Cocoa Touch and Android controls<br>Business-related data objects on the client side<br> Remote data -- web API, just data & no presentation logic<br>Component oriented -- UI loosely coupled from app logic",
		"%l_titanium_js_env": "The Titanium JavaScript Environment",
		"%l_v8": "V8/Rhino or JavaScriptCore interpreters",
		"%l_code_runs": "Code runs in an 'execution context', similar to the single JS thread in the browser (more soon)",
		"%l_app_js": "app.js defines the root application context",
		"%l_most_of": "Most of the time, one context is okay",
		"%l_slidenote_hello_world_running": "",
		"%l_structuring_js_code": "Structuring JavaScript Code",
		"%l_structuring_goals": "<strong>Goals:</strong>",
		"%l_structure1": "Ease of writing, maintaining, and updating",
		"%l_structure2": "Support team development",
		"%l_structure3": "Performance",
		"%l_structure4": "Avoid name collisions",
		"%l_structuring_options": "<strong>Options:</strong>",
		"%l_structureoption1": "Windows with URL properties",
		"%l_structureoption2": "Ti.include()",
		"%l_structureoption3": "CommonJS require()",
		"%l_usage_demos": "<strong>Usage Demos</strong>",
		"%l_slidenote_structuring_js_code": "<p>Goals: Ease, performance, no errors &lt;- structured code</p><ul><li>Window/URL - KitchenSink style, separate contexts, difficulty sharing data,  useful in a only few situations.</li><li>Ti.include - code injected into current execution context, single global namespace, easy to develop but can be slow especially on Android</li><li>CommonJS - isolated scopes, modules return published properties and methods</li></ul><p><strong>Demos -- Create new default project</strong></p><ul><li>Win/URL: Copy all win1 components to new file, add <code>win1.url</code> property, build, add event listener on label2 to update text of label1, add App-level events to 'fix' the problem</li><li>Ti.include() - use include() rather than URL property, update event listener</li><li>CommonJS Demo:<ol><li>Create logger.js file:exports.info = function(_str) { Ti.API.info(_str); }</li><li>In app.js, enter require('logger')</li><li>In app.js, enter logger.info('logged with common js');</li><li>Launch and show console</li></ol></li></ul>",
		"%l_dont_extend": "Don't extend Titanium proxies",
		"%l_general_rule": "General rule: don't add properties or methods to Titanium objects (Ti.App, Ti.API, Ti.UI.*)",
		"%l_critical": "Critical: don't use 'get/set' in methods you add",
		"%l_you_cant": "You can't override built-in methods and properties",
		"%l_but": "(But, it's usually okay to add a property or two)",
		"%l_slidenote_dont_extend": "Let's talk about how you <em>should</em> structure your projects.<br/>Titanium proxies represent native objects. E.g. Ti.UI.Button has a native button counterpart<br>Adding properties and methods could break the link between the JavaScript objects and their native equivalents<br>Can't use words get or set in method names -- those are reserved 'magic' on iOS and Titanium will ignore your code and try to call those methods on the native proxy instead<br>You can't override (replace) any of the built in methods or properties<br>DUsually okay to add one or two properties (e.g. primary key of a database record in a table row or map annotation).",
		"%l_namespaces": "Namespaces",
		"%l_globalnamespace": "JavaScript shares a single global namespace",
		"%l_createyourown": "Namespace your variables to:",
		"%l_prevent": "Prevent collisions",
		"%l_discrete": "Provide discrete 'containers' for variables &amp; other identifiers",
		"%l_ti_namespaces": "Follow the model of Titanium -- <br>Titanium.UI, Titanium.App, Titanium.API, etc.",
		"%l_namespacecode": "var MyApp = {}; // create an object, serves as app's single global variable\nMyApp.someproperty = 'foo';\nMyApp.somefunction = function() {};\nMyApp.DB = {}; // a 'sub-namespace' for specific, related functionality\n",

		"%l_slidenote_namespaces": "Don't pollute the global scope! <br/>Use namespaces to prevent problems -- with your own code, shared libraries, team member's code, etc. Lots of sources of name collisions.",

		"%l_cjsconsiderations": "CommonJS Considerations",
		"%l_cjs1": "Modules have their own global namespace",
		"%l_cjs2": "No access to the calling context's namespace",
		"%l_cjs3": "Return the properties and methods you specify",
		"%l_cjs4": "Others are 'private'",
		"%l_slidenote_cjsconsiderations": "Modules are discrete and don't have access to the calling context's global context. This has advantages and presents a couple of challenges. For example, you can't store runtime values in a global object and expect modules to have access.",


		"%l_so_what": "So what does a sane app look like?",
		"%l_app_js": "app.js is your bootstrap file",
		"%l_defines": "Defines app's name space",
		"%l_includes": "Requires in the app's files",
		"%l_creates": "Creates and opens the first UI component",
		"%l_saneapp1code": "\nvar myapp = {}; // define your app's namespace\nmyapp.someproperty = 'foo'; // runtime variables are stored w/in myapp\n\nmyapp.ui = {}; // sub-namespace for our UI-related properties/methods\nmyapp.ui.mainWindow = require('ui/mainWindow').init();\n\n// you can pass data to modules should you need to\nmyapp.ui.mainWindow.add(require('ui/someComponent').init(myapp.someproperty));\n\nmyapp.ui.mainWindow.open(); // open our app's main UI component\n\n",
		"%l_slidenote_so_what": "So let's talk about what a sane app should look like.<br>Not much logic in app.js -- just bootstraps your app",
		
		"%l_saneapp2": "So what does a sane app look like?",
		"%l_saneapp2_explanation": "Or take it even further...no global variables!",
		"%l_saneapp2code": "\n(function() {\n  var myapp = {}; // define your app's namespace\n  myapp.someproperty = 'foo'; // runtime variables are stored w/in myapp\n\n  myapp.ui = {}; // sub-namespace for our UI-related properties/methods\n  myapp.ui.mainWindow = require('ui/mainWindow').init();\n\n  // you can pass data to modules should you need to\n  myapp.ui.mainWindow.add(require('ui/someComponent').init(myapp.someproperty));\n\n  myapp.ui.mainWindow.open();\n\n})();\n ",

		"%l_slidenote_saneapp2": "You can wrap your code in a self-calling function to avoid any variables to the global namespace.<br/><br/>If you use Ti.include() instead of require, this is how you should structure your code.",

		"%l_modules": "CommonJS modules implement app functionality",
		"%l_modulescode": "\n// file is mainWindow.js\nvar foo = 'bar'; // this is a local variable\n\n// anything assigned to exports is sent back to calling context\nexports.init() {\n\n  // require in other modules as needed\n  var uiprefs = require('ui/uiprefs'); // maybe an app-wide prefs object\n\n  return Ti.UI.createWindow({\n    backgroundColor: uiprefs.windowBGColor\n  });\n\n};\n ",
		"%l_slidenote_modules": "Define local variables and functions as needed.<br/><br/>Anything assigned to <code>exports</code> is available to calling context.<br/><br/>Make sure to return something!",

		"%l_modfactories": "Modules as Constructors",
		"%l_modfactorycode": "// file is Button.js\n\n// creates a UI component we'll need many copies of\nvar Button = function(title) {\n  return Ti.UI.createButton({ title: title });\n};\n\nmodule.exports = Button; // return the constructor\n ",
		"%l_modfactorycode2": "// how to use it\n\nvar Button = require('ui/Button');\n\n// now make some instances\nvar button1 = new Button('foo');\n\var button2 = new Button('bar');\n ",
		"%l_slidenote_modfactories": "By assigning a function to the module.exports variable, you can use the returned object as a constructor. Great for UI components.",


		"%l_cross_platform": "Cross-Platform in Titanium",
		"%l_cross": "Cross-platform !== 'Write Once, Run Everywhere'",
		"%l_titanium": "Titanium is 'Write Once, Adapt Everywhere'",
		"%l_we_should": "We should be building 'Best of Breed' apps",
		"%l_non_visual": "Non-visual code and much UI code can be 100% portable",
		"%l_accept": "Accept and embrace platform differences",
		"%l_slidenote_cross_platform": "Code reuse is about 60-90% across platforms. UI especially must be tailored.<br/><br/>Embrace platform:<br/>On iOS, that means using Cocoa UI components and local notifications<br/>On Android: registering intents or controlling the hardware back button on Android",

		"%l_platform_specific": "Platform-Specific Examples",
		"%l_android": "Android: intents, background services, hardware menu button",
		"%l_ios": "iOS: routes in maps, pre-built animations, Cocoa UI",
		"%l_platform": "Platform-specific APIs are implemented in a platform-specific namespace",
		"%l_slidenote_platform_specific": "Special api sections, platform only supported logic, etc<br> resolutions, services, intents/actions.<br>Because you have these diffs, the API provided is not always supported in all platforms, be aware of this.",

		"%l_mobileweb": "Mobile Web",
		"%l_mwexplanation": "Native vs. Web app vs. Hybrid",
		"%l_mwexplanation2": "What Mobile Web Can Do",
		"%l_mwexplanation3": "What Mobile Web Can't Do",
		"%l_mwexplanation4": "Supported Browsers and Limitations",
		"%l_slidenote_mobileweb": "Mobile Web is our new HTML5 build target. Virtually the same code compile to native (iOS/Android) or HTML.<ul><li>Native - runs directly on device OS</li><li>Web app - mobile-ready web pages</li><li>Hybrid - Web app 'wrapped' so it's installable (WebView or Phonegap)</ul>First RC release with Ti2.0 - Common UI elements, HTTP networking, local storage, modules via AMD or CommonJS<br/>But can't do platform-specifics (such as iOS local notifications), provide universal access to hardware sensors (not supported on all browsers/OSes), access Contacts or Calendars.<br/>See the wiki for other limitations.",



		"%l_developing_for": "Developing for Multiple Platforms",
		"%l_titanium_api": "Titanium API provides a platform variable that can be used with if statements",
		"%l_specific_resources": "Platform-specific resources:",
		"%l_code": "Code files",
		"%l_images": "Images, text, and any other file type	",
		"%l_tiappxml": "Platform configuration in tiapp.xml",
		"%l_slidenote_developing_for": "If/then branching -- great when differences are few<br/>Platform-specific directories -- great with many differences between platforms, or for varying graphics. <br>Tiapp.xml provides special config options per platform",

		"%l_platform_name": "Platform Name",
		"%l_use_the": "Use the platform name to branch:",
		"%l_branchcode": "\nvar isAndroid = false;\nif(Ti.Platform.osname == 'android') {\n  isAndroid = true;\n  // some other Android-specific code here...n}\n ",
		"%l_ternary": "Use with JavaScript's ternary operator:",
		"%l_ternarycode": "\nvar win = Ti.UI.createWindow({\n  backgroundColor: (isAndroid) ? 'green' : 'blue'\n});\n\n// is equivalent to\nif(Ti.Platform.name == 'android') {\n  var win = Ti.UI.createWindow({\n    backgroundColor: 'green'\n  });\n} else {\n  var win = Ti.UI.createWindow({\n    backgroundColor: 'blue'\n  });\n}\n ",
		"%l_slidenote_platform_name": "Define local variables to minimize trips 'across the bridge' (going from JavaScript to Native and back)",

		"%l_platform_specific_resources": "Platform-specific resources:",
		"%l_slidenote_platform_specific_resources": "Files in these directories supersede those in Resources <br>As the build process runs it will compose files from these folders so that if a file is here it will be exchanged so that the correct one is used in the root project instead.",
		"%l_specific_resources": "Platform-specific resources:",
		"%l_resolution_specific_resources": "Resolution-Specific Resources",
		"%l_slidenote_resolution_specific_features": "Retina / non-retina on iOS<br>Resolution, orientation, and aspect ratio versions on Android<br>Refer by the base name on all and the correct version will be used.",
		"%l_slidenote_resolution_specific_featuresspaces": "Platform Namespaces",
		"%l_functionality": "Platform-specific functionality is broken out into sub-namespaces where appropriate",
		"%l_slidenote_platform_namespaces": "Separate name spaces for platform-specific functionality<",
		"%l_platform_js": "Platform-Specific JSS",
		"%l_jss": "JSS can be segregated per-platform:",
		"%l_app_jss": "app.js",
		"%l_app_android_jss": "app.android.jss",
		"%l_app_android_high_jss": "app.android.high.jss",
		"%l_app_android_med_jss": "app.android.medium.jss",
		"%l_app_android_low_jss": "app.android.low.jss",
		"%l_app_iphone_jss": "app.iphone.jss",
		"%l_wiki_url": "http://wiki.appcelerator.org/display/guides/User+Interface+Fundamentals",
		"%l_slidenote_platform_js": "JSS files <br>					http://wiki.appcelerator.org/display/guides/Designing+the+User+Interface",
		"%l_icons": "Icons and splash screens",
		"%l_slidenote_icons": "Appicon.png is your app's icon<br>Default.png is the splash screen<br>Can be in platform-specific folders for platform-specific icons<br>Can set resolution-specific versions by using the appropriate folders",
		"%l_internationalization": "Internationalization",
		"%l_functionality": "Platform-specific functionality is broken out into sub-namespaces where appropriate",
		"%l_slidenote_l_internationalization": "Project/i18n/<i>lang</i>/strings.xml<br><i>lang</i> = language name per ISO 639-1 standard<br><i>component</i>refers to most any of the UI elements: buttons, views, etc.<br>Use titleid instead of title property<br>app.xml defines the internationalized version of your app's name",
		"%l_qa": "Q&amp;A",
		"%l_slidenote_qa": "Before we move into the lab, what questions do you have?",
		"%l_introducing": "Introducing TiBountyHunter",
		"%l_demo_app": "Demo app from Head First Series (good book)",
		"%l_lines": "863 lines of low level, single platform Objective-C",
		"%l_we_will": "We will write a more complete, cross-platform app in less than 50% of the code",
		"%l_slidenote_introducing": "TiBountyHunter is based on iBountyHunter from Head First iPhone Development, which is a solid book.<br>In addition to the Objective C code, there are also interface builder files which contain the bulk of the UI layout, so it's closer to 30% of the code.<br>Our app will have more features, and run cross platform",
		"%l_lab_goals": "Lab Goals",
		"%l_create": "Create the foundation for a localizable, cross-platform application",
		"%l_setup": "Set up JavaScript code framework",
		"%l_become": "Become familiar with foundational JavaScript coding techniques",
		"%l_ibounty": "iBountyHunter demo, Lab Demo",
		"%l_labURL": "<a href='http://wiki.appcelerator.org/display/td/215+Cross+Platform+Mobile+Development+in+Titanium'>wiki.appcelerator.org/display/td/215+Cross+Platform+Mobile+Development+in+Titanium</a>",
		"%l_slidenote_lab_goals": "Demo original iBountyHunter -- code at:<br>http://examples.oreilly.com/9780596803551/Chapter_9.zip<br>Demo TiBountyHunter as of end of this lab<ul><li>Two tabs</li><li>Separate window titles</li><li>Compile and run on both platforms</li></ul>Code Walkthrough - TiBH215<br><u>app.js</u><ul><li>namespace definition</li><li>include statements</li></ul><u>ui.js</u><ul><li>explain basic UI elements</li></ul><u>i18n</u><ul><li>language strings file</li></ul>"
	}
});
